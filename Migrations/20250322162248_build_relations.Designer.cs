// <auto-generated />
using System;
using Learning_management_system.dbcontext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Learning_management_system.Migrations
{
    [DbContext(typeof(Appdbcontext))]
    [Migration("20250322162248_build_relations")]
    partial class build_relations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Learning_management_system.Models.Announcement", b =>
                {
                    b.Property<int>("Announcement_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Course_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Createddate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Announcement_Id");

                    b.HasIndex("Course_Id");

                    b.ToTable("Tb_Announcement");
                });

            modelBuilder.Entity("Learning_management_system.Models.Assignment", b =>
                {
                    b.Property<int>("Assignment_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Assignment_Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Assignment_Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Createddate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Module_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("duedate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Assignment_Id");

                    b.HasIndex("Module_Id");

                    b.ToTable("Tb_Assignment");
                });

            modelBuilder.Entity("Learning_management_system.Models.Certifications", b =>
                {
                    b.Property<int>("Certification_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Course_Id")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.Property<string>("certificate_code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("expiry_date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("issue_date")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Certification_Id");

                    b.HasIndex("Course_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Tb_Certifications");
                });

            modelBuilder.Entity("Learning_management_system.Models.Courses", b =>
                {
                    b.Property<int>("Course_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Course_Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Course_Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Createddate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Modifieddate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Course_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Tb_Courses");
                });

            modelBuilder.Entity("Learning_management_system.Models.Courssemodules", b =>
                {
                    b.Property<int>("Module_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Course_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Createddate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Modifieddate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Module_Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Module_Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Module_Id");

                    b.HasIndex("Course_Id");

                    b.ToTable("Tb_Coursemodules");
                });

            modelBuilder.Entity("Learning_management_system.Models.Enrollment", b =>
                {
                    b.Property<int>("Enrollment_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Course_Id")
                        .HasColumnType("int");

                    b.Property<int>("CoursesCourse_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Enrollment_date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.Property<int>("User_Id1")
                        .HasColumnType("int");

                    b.Property<int>("enrollmentstatus")
                        .HasColumnType("int");

                    b.HasKey("Enrollment_Id");

                    b.HasIndex("CoursesCourse_Id");

                    b.HasIndex("User_Id1");

                    b.ToTable("Tb_Enrollment");
                });

            modelBuilder.Entity("Learning_management_system.Models.Forumposts", b =>
                {
                    b.Property<int>("Forumpost_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Createddate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ForumTopic_Id")
                        .HasColumnType("int");

                    b.Property<int>("createdby")
                        .HasColumnType("int");

                    b.Property<string>("postcontent")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Forumpost_Id");

                    b.HasIndex("ForumTopic_Id");

                    b.HasIndex("createdby");

                    b.ToTable("Tb_Forumposts");
                });

            modelBuilder.Entity("Learning_management_system.Models.Forums", b =>
                {
                    b.Property<int>("ForumTopic_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Course_Id")
                        .HasColumnType("int");

                    b.Property<string>("ForumTopic")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("createdby")
                        .HasColumnType("int");

                    b.Property<DateTime>("createddate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ForumTopic_Id");

                    b.HasIndex("Course_Id");

                    b.HasIndex("createdby");

                    b.ToTable("Tb_Forums");
                });

            modelBuilder.Entity("Learning_management_system.Models.Liveclasses", b =>
                {
                    b.Property<int>("Liveclass_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Course_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Createddate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("instructor_id")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("vedio_link")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Liveclass_Id");

                    b.HasIndex("Course_Id");

                    b.HasIndex("instructor_id");

                    b.ToTable("Tb_Liveclasses");
                });

            modelBuilder.Entity("Learning_management_system.Models.Quizes", b =>
                {
                    b.Property<int>("Quiz_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Course_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Createddate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Quiz_Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Quiz_Id");

                    b.HasIndex("Course_Id");

                    b.ToTable("Tb_Quizes");
                });

            modelBuilder.Entity("Learning_management_system.Models.Quizoptions", b =>
                {
                    b.Property<int>("Option_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Is_correct")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Option_text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Question_Id")
                        .HasColumnType("int");

                    b.HasKey("Option_Id");

                    b.HasIndex("Question_Id");

                    b.ToTable("Tb_Quizoptions");
                });

            modelBuilder.Entity("Learning_management_system.Models.Quizquestions", b =>
                {
                    b.Property<int>("question_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Quiz_Id")
                        .HasColumnType("int");

                    b.Property<int>("answertypes")
                        .HasColumnType("int");

                    b.Property<string>("question_text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("question_Id");

                    b.HasIndex("Quiz_Id");

                    b.ToTable("Tb_Quizquestions");
                });

            modelBuilder.Entity("Learning_management_system.Models.Quizresult", b =>
                {
                    b.Property<int>("result_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Quiz_Id")
                        .HasColumnType("int");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("datetaken")
                        .HasColumnType("datetime(6)");

                    b.HasKey("result_Id");

                    b.HasIndex("Quiz_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Tb_Quizresult");
                });

            modelBuilder.Entity("Learning_management_system.Models.Submission", b =>
                {
                    b.Property<int>("Submission_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Assignment_Id")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.Property<string>("feedback")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("filepaths")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("grade")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("submission_date")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Submission_Id");

                    b.HasIndex("Assignment_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Tb_Submission");
                });

            modelBuilder.Entity("Learning_management_system.Models.User", b =>
                {
                    b.Property<int>("User_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Createddate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("User_Type")
                        .HasColumnType("int");

                    b.HasKey("User_Id");

                    b.ToTable("Tb_Users");
                });

            modelBuilder.Entity("Learning_management_system.Models.Announcement", b =>
                {
                    b.HasOne("Learning_management_system.Models.Courses", "Courses")
                        .WithMany()
                        .HasForeignKey("Course_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Learning_management_system.Models.Assignment", b =>
                {
                    b.HasOne("Learning_management_system.Models.Courssemodules", "Courssemodules")
                        .WithMany()
                        .HasForeignKey("Module_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courssemodules");
                });

            modelBuilder.Entity("Learning_management_system.Models.Certifications", b =>
                {
                    b.HasOne("Learning_management_system.Models.Courses", "Courses")
                        .WithMany()
                        .HasForeignKey("Course_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Learning_management_system.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courses");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Learning_management_system.Models.Courses", b =>
                {
                    b.HasOne("Learning_management_system.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Learning_management_system.Models.Courssemodules", b =>
                {
                    b.HasOne("Learning_management_system.Models.Courses", "Courses")
                        .WithMany()
                        .HasForeignKey("Course_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Learning_management_system.Models.Enrollment", b =>
                {
                    b.HasOne("Learning_management_system.Models.Courses", "Courses")
                        .WithMany()
                        .HasForeignKey("CoursesCourse_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Learning_management_system.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("User_Id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courses");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Learning_management_system.Models.Forumposts", b =>
                {
                    b.HasOne("Learning_management_system.Models.Forums", "Forums")
                        .WithMany()
                        .HasForeignKey("ForumTopic_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Learning_management_system.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("createdby")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Forums");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Learning_management_system.Models.Forums", b =>
                {
                    b.HasOne("Learning_management_system.Models.Courses", "Courses")
                        .WithMany()
                        .HasForeignKey("Course_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Learning_management_system.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("createdby")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courses");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Learning_management_system.Models.Liveclasses", b =>
                {
                    b.HasOne("Learning_management_system.Models.Courses", "Courses")
                        .WithMany()
                        .HasForeignKey("Course_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Learning_management_system.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("instructor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courses");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Learning_management_system.Models.Quizes", b =>
                {
                    b.HasOne("Learning_management_system.Models.Courses", "Courses")
                        .WithMany()
                        .HasForeignKey("Course_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Learning_management_system.Models.Quizoptions", b =>
                {
                    b.HasOne("Learning_management_system.Models.Quizquestions", "Quizquestions")
                        .WithMany()
                        .HasForeignKey("Question_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quizquestions");
                });

            modelBuilder.Entity("Learning_management_system.Models.Quizquestions", b =>
                {
                    b.HasOne("Learning_management_system.Models.Quizes", "Quizes")
                        .WithMany()
                        .HasForeignKey("Quiz_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quizes");
                });

            modelBuilder.Entity("Learning_management_system.Models.Quizresult", b =>
                {
                    b.HasOne("Learning_management_system.Models.Quizes", "Quizes")
                        .WithMany()
                        .HasForeignKey("Quiz_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Learning_management_system.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quizes");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Learning_management_system.Models.Submission", b =>
                {
                    b.HasOne("Learning_management_system.Models.Assignment", "Assignment")
                        .WithMany()
                        .HasForeignKey("Assignment_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Learning_management_system.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
